%% Initialize
constants = physical_constants();
fragment_energy_eV = 0.6;
dissoc_speed = 1.0e-3 * sqrt(2 * fragment_energy_eV * constants("elementary charge") ...
                                / constants("proton mass"));
T = 1.0e-3;

batches = 24;
particles_per_batch = 32;
displacement = 3.0;
n_particles = batches * particles_per_batch;
m = 1.0;

constants = physical_constants();
simion_path = "SIM001_data/005_TOF_electrode_stack";
electrode_names = ["backingplate.patxt", ...
                   "electrode1.patxt", ...
                   "electrode2.patxt", ...
                   "electrode3.patxt", ...
                   "electrode4.patxt", ...
                   "electrode5.patxt", ...
                   "electrode6.patxt", ...
                   "detector.patxt", ...
                  ];
start_line = 19;
loadanyways = true;
if ~exist('dimensions', 'var') || loadanyways
    addpath(simion_path)
    [potential_maps, is_electrode, dimensions] = ...
        readFile(electrode_names, start_line);
    % potential_maps = potential_maps / 10000.0;
    is_electrode = logical(is_electrode);
end
d = 1.0;

xx1 = d * double(dimensions(1) - 1) / 2.0;  % mm
yy1 = d * double(dimensions(2) - 1) * 0.91; % mm
zz1 = d * double(dimensions(3) - 1) / 2.0;  % mm
xxs = normrnd(xx1, displacement, [n_particles 1]);
yys = normrnd(yy1, displacement, [n_particles 1]);
zzs = normrnd(zz1, displacement, [n_particles 1]);
maxwell = @(v) maxwell_pdf(v, m, T);
% Maxwell-Boltzmann distribution speeds
vs = general_distribution(n_particles, 1.0e-3, 1000, maxwell) * 1.0e-3;
% Uniform distribution direcitions
thetas = 2 * pi * rand([n_particles 1]);
phis   = 2 * pi * rand([n_particles 1]);
% Convert speed & direction -> velocity
vxxs = vs .* sin(thetas) .* cos(phis);      % mm / us
vyys = vs .* sin(thetas) .* sin(phis);      % mm / us
vzzs = vs .* cos(thetas);                   % mm / us
% Cos2 distribution
cos2 = @(theta) (cos(theta).^2.) / (pi);
thetas2 = general_distribution(n_particles, 0.001, 2*pi, cos2);
vxxs = vxxs + dissoc_speed * cos(thetas2);
vyys = vyys + dissoc_speed * sin(thetas2);

%% Optimize
% After a few hours of optimization:
% result =
% 
%  12.5829    0.1043    0.7949    1.0000    0.4009    0.1253    0.7664


func = @(x)optimization_target( x, batches, particles_per_batch, ...
                                xxs, yys, zzs, vxxs, vyys, vzzs, ...
                                potential_maps, is_electrode, dimensions, electrode_names);

options = optimoptions( 'surrogateopt', ...
                        'Display','iter', ...
                        'PlotFcn', [], ...%'surrogateoptplot', ...
                        'MaxTime', Inf, ...
                        'ObjectiveLimit', -Inf, ...
                        'UseParallel', true, ...
                        'MinSampleDistance', 0.1);
options.MaxFunctionEvaluations = 50000;
result = surrogateopt(func, [10.   -5000. -5000. -5000. -5000.], ...
                            [5000.  5000.  5000.  5000.  5000.], options)

function score = optimization_target(x, batches, particles_per_batch, ...
                                     xxs, yys, zzs, vxxs, vyys, vzzs, ...
                                     potential_maps, is_electrode, dimensions, electrode_names)
    n_particles = batches * particles_per_batch;
    score = ...
        score_stack_ours(    x(1), ...
                               0., ...
                             x(2), ...
                             x(3), ...
                             x(4), ...
                             x(5), ...
                            batches, particles_per_batch, ...
                            xxs, yys, zzs, ...
                            vxxs, vyys, vzzs, ...
                            potential_maps, is_electrode, dimensions, electrode_names);
end