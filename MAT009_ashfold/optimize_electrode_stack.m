%% Initialize

constants = physical_constants();
fragment_energy_eV = 0.6;
dissoc_speed = 1.0e-3 * sqrt(2 * fragment_energy_eV * constants("elementary charge") ...
                                / constants("proton mass"));
T = 1.0e-3;

batches = 24;
particles_per_batch = 32;
displacement = 3.0;
n_particles = batches * particles_per_batch;
m = 1.0;

constants = physical_constants();
simion_path = "SIM001_data\009_ashfold_vmi_stack";
electrode_names = ["ion_optics_assy-ashfold-A0.0.pa1.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa2.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa3.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa4.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa5.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa6.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa7.patxt", ...
               "ion_optics_assy-ashfold-A0.0.pa8.patxt", ...
              ];
start_line = 19;
loadanyways = true;
if ~exist('dimensions', 'var') || loadanyways
    addpath(simion_path)
    [potential_maps, is_electrode, dimensions] = ...
        readFile(electrode_names, start_line);
    % potential_maps = potential_maps / 10000.0;
    is_electrode = logical(is_electrode);
end
d = 1.0;

xx1 = d * double(dimensions(1) + 1) / 2.0;
yy1 = d * double(dimensions(2) + 1) / 2.0;
zz1 = d * double(dimensions(3) + 1) * 0.945;
xxs = normrnd(xx1, displacement, [n_particles 1]);
yys = normrnd(yy1, displacement, [n_particles 1]);
zzs = normrnd(zz1, displacement, [n_particles 1]);
maxwell = @(v) maxwell_pdf(v, m, T);
% Maxwell-Boltzmann distribution speeds
vs = general_distribution(n_particles, 1.0e-3, 1000, maxwell) * 1.0e-3;
% Uniform distribution direcitions
thetas = 2 * pi * rand([n_particles 1]);
phis   = 2 * pi * rand([n_particles 1]);
% Convert speed & direction -> velocity
vxxs = vs .* sin(thetas) .* cos(phis);      % mm / us
vyys = vs .* sin(thetas) .* sin(phis);      % mm / us
vzzs = vs .* cos(thetas);                   % mm / us
% Cos2 distribution
cos2 = @(theta) (cos(theta).^2.) / (pi);
thetas2 = general_distribution(n_particles, 0.001, 2*pi, cos2);
vxxs = vxxs + dissoc_speed * cos(thetas2);
vyys = vyys + dissoc_speed * sin(thetas2);

%% Optimize
% After a few hours of optimization:
% (3000V repeller, 0V focus)
% result =
% 
%    1.0e+03 *
% 
%     0.0702   -1.8188    1.7542   -0.0021   -5.0000
%
% (25V repeller, 0V focus)
% result =
% 
%    1.0e+03 *
% 
%     0.2439   -7.8970    0.6049    0.0134   -2.7058



func = @(x)optimization_target( x, batches, particles_per_batch, ...
                                xxs, yys, zzs, vxxs, vyys, vzzs, ...
                                potential_maps, is_electrode, dimensions, electrode_names);

options = optimoptions( 'surrogateopt', ...
                        'Display','iter', ...
                        'PlotFcn', [], ...%'surrogateoptplot', ...
                        'MaxTime', Inf, ...
                        'ObjectiveLimit', -Inf, ...
                        'UseParallel', true, ...
                        'MinSampleDistance', 0.1);
options.MaxFunctionEvaluations = 50000;
result = surrogateopt(func, [10.   -5000. -5000. -5000. -5000. -5000.], ...
                            [5000. 50000.  5000.  5000.  5000.  5000.], options)

% options = optimoptions( 'fmincon', ...
%                         'Algorithm', 'interior-point', ...
%                         'Display','iter', ...
%                         'MaxIterations', 1.0e+3, ...
%                         'ObjectiveLimit', -Inf, ...
%                         'UseParallel', true, ...
%                         'StepTolerance', 1.0e-15);
% variables = 3;
% guess = double([5000. -100. -50.]);
% result =      fmincon(func, guess, [], [], [], [], ...
%                             [10.   -5000. -5000.], ...
%                             [5000.  5000.  5000.], [], options)


function score = optimization_target(x, batches, particles_per_batch, ...
                                     xxs, yys, zzs, vxxs, vyys, vzzs, ...
                                     potential_maps, is_electrode, dimensions, electrode_names)
    n_particles = batches * particles_per_batch;
    score = ...
        score_stack( x(1), ...
                       0., ...
                     x(2), ...
                     x(3), ...
                     x(4), ...
                     x(5), ...
                     x(6), ...
                    batches, particles_per_batch, ...
                    xxs, yys, zzs, ...
                    vxxs, vyys, vzzs, ...
                    potential_maps, is_electrode, dimensions, electrode_names);
    % fprintf("SCORE: %14.8g  {Repeller: %9.3g, Focus: %9.3g, Shims: (%9.3g, %9.3g, %9.3g), Lenses: (%9.3g, %9.3g)}\n", ...
    %             score, x(1), 0.0, 0.0, x(2), x(2), x(2), x(3))
end